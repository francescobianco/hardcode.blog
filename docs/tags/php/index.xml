<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Php on HARDCODE.BLOG</title>
    <link>https://hardcode.blog/tags/php/</link>
    <description>Recent content in Php on HARDCODE.BLOG</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-en</language>
    <copyright>¬© Francesco Bianco</copyright>
    <lastBuildDate>Fri, 21 Jun 2024 12:17:31 +0200</lastBuildDate>
    <atom:link href="https://hardcode.blog/tags/php/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Potenza e responsabilit√†, l&#39;uso di `call_user_func_array` in php</title>
      <link>https://hardcode.blog/posts/php/20240621-chiamata-indiretta-di-una-funzione/</link>
      <pubDate>Fri, 21 Jun 2024 12:17:31 +0200</pubDate>
      <guid>https://hardcode.blog/posts/php/20240621-chiamata-indiretta-di-una-funzione/</guid>
      <description>Nel vasto mondo di PHP, la funzione call_user_func_array √® una delle pi√π potenti e versatili a disposizione degli sviluppatori. Permette di chiamare una funzione in modo dinamico, passando i parametri come array. Questo articolo esplora come utilizzare questa funzione, presenta esempi pratici e analizza le implicazioni filosofiche dell&amp;rsquo;uso di chiamate di funzione indiretta.&#xA;üåê Ti piacciono questi temi? Aiutaci a migliorare e a raggiungere pi√π persone! Se trovi utile questo articolo, condividilo con i tuoi amici e colleghi sui social.</description>
    </item>
    <item>
      <title>PHP8, Dalle prime impressioni alle riflessioni sul futuro</title>
      <link>https://hardcode.blog/posts/php/20200621-php8/</link>
      <pubDate>Sun, 21 Jun 2020 12:58:30 +0200</pubDate>
      <guid>https://hardcode.blog/posts/php/20200621-php8/</guid>
      <description>Sono gi√† passati diversi anni dal lancio di PHP 8, eppure sembra ieri che si discuteva delle sue nuove feature come JIT (Just-in-Time Compiler) e le union types. Con il passare del tempo, PHP ha dimostrato di essere un linguaggio che sa come evolversi senza spezzare il legame con il passato. Ogni nuova versione porta miglioramenti significativi, ma sempre con l‚Äôobiettivo di garantire che le applicazioni esistenti possano continuare a funzionare senza intoppi.</description>
    </item>
  </channel>
</rss>
