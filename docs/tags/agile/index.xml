<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>agile on HARDCODE.BLOG</title>
    <link>https://hardcode.blog/tags/agile/</link>
    <description>Recent content in agile on HARDCODE.BLOG</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-en</language>
    <copyright>© Francesco Bianco</copyright>
    <lastBuildDate>Thu, 20 Jun 2024 16:08:23 +0000</lastBuildDate><atom:link href="https://hardcode.blog/tags/agile/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Il pericolo del gold plating: quando troppe funzionalità portano al fallimento</title>
      <link>https://hardcode.blog/posts/20240620-gold-plating/</link>
      <pubDate>Thu, 20 Jun 2024 16:08:23 +0000</pubDate>
      
      <guid>https://hardcode.blog/posts/20240620-gold-plating/</guid>
      <description>Nel mondo della gestione dei progetti e dello sviluppo software, il termine &amp;ldquo;gold plating&amp;rdquo; si riferisce all&amp;rsquo;aggiunta di funzionalità o caratteristiche non richieste ai prodotti. Sebbene possa sembrare un&amp;rsquo;ottima idea arricchire un prodotto con funzioni aggiuntive, questa pratica può portare a una serie di problemi significativi, tra cui sforamento dei tempi e dei costi, complicazioni tecniche e insoddisfazione degli utenti. Una metafora interessante per comprendere il concetto è quella dello zucchero in una bevanda: un po&amp;rsquo; di zucchero può migliorare il sapore, ma troppo può renderla imbevibile.</description>
    </item>
    
    <item>
      <title>Agile is dead!</title>
      <link>https://hardcode.blog/posts/20200928-agile-is-dead/</link>
      <pubDate>Mon, 05 Apr 2021 13:19:26 +0200</pubDate>
      
      <guid>https://hardcode.blog/posts/20200928-agile-is-dead/</guid>
      <description>Intro The premise is perhaps too dramatic and maybe a little click-catcher, but I think there is juice. Today when we talk about Agile everyone wants to have their say, everyone wants to apply their method with their thousand variations derived from their own experience. This leads me to ask myself some fundamental questions:
What I miss Can a methodology determine success or failure, or only responsible for wasted resources? Why the fundamental concepts of Agile are not patterns that can be incorporated into any other methodology?</description>
    </item>
    
  </channel>
</rss>
